/* The following code was generated by JFlex 1.4.3 on 20/06/2025, 01:35 */

package analizador_léxico_zoolang;
import static analizador_léxico_zoolang.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 20/06/2025, 01:35 from the specification file
 * <tt>src/analizador_léxico_zoolang/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\6\2\0\1\1\22\0\1\1\1\56\1\4\4\0"+
    "\1\7\1\63\1\64\1\12\1\62\1\73\1\32\1\10\1\11\12\3"+
    "\1\72\1\71\1\57\1\55\1\33\2\0\1\47\1\2\1\46\1\2"+
    "\1\42\1\54\1\2\1\16\1\45\4\2\1\40\1\44\2\2\1\50"+
    "\1\2\1\51\1\41\1\43\2\2\1\60\1\22\1\67\1\5\1\70"+
    "\1\0\1\2\1\0\1\17\1\20\1\25\1\31\1\30\1\24\1\53"+
    "\1\37\1\13\2\2\1\26\1\21\1\14\1\23\1\35\1\2\1\34"+
    "\1\27\1\15\1\36\1\52\4\2\1\65\1\0\1\66\43\0\1\61"+
    "\uff5e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\2\1\1\5\1\6"+
    "\1\7\12\3\1\10\1\11\10\3\1\12\1\13\1\14"+
    "\1\3\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\0\1\27\3\0\1\30\1\0"+
    "\6\3\1\31\14\3\1\32\1\33\6\3\1\34\3\3"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\27\2\45\1\0\2\3\1\46\21\3\1\47\14\3"+
    "\1\50\1\0\3\3\1\51\2\3\1\0\3\3\1\52"+
    "\3\3\1\53\1\3\1\54\1\3\1\55\4\3\1\56"+
    "\1\57\1\3\1\60\2\3\1\61\6\3\1\62\2\3"+
    "\1\63\3\3\1\64\6\3\1\65\4\3\1\0\1\3"+
    "\1\0\2\3\1\66\1\67\1\3\1\70\2\3\1\71"+
    "\3\3\1\72\2\3\1\73\1\74\1\75\6\3\1\76"+
    "\1\77\1\3\1\100\1\101\1\102\2\3\1\103\1\104"+
    "\1\105\2\3\1\106\1\3\1\107\2\3\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\74\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348"+
    "\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528"+
    "\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708"+
    "\0\u0744\0\u0780\0\u07bc\0\74\0\74\0\74\0\74\0\74"+
    "\0\74\0\74\0\74\0\74\0\u07f8\0\u012c\0\74\0\u0834"+
    "\0\u0870\0\u08ac\0\74\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8"+
    "\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8"+
    "\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\74"+
    "\0\74\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\74"+
    "\0\u0f00\0\u0f3c\0\u0f78\0\74\0\74\0\74\0\74\0\74"+
    "\0\74\0\74\0\u07f8\0\u012c\0\74\0\u0870\0\u0fb4\0\u0ff0"+
    "\0\u102c\0\264\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194"+
    "\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374"+
    "\0\u13b0\0\u13ec\0\u1428\0\264\0\u1464\0\u14a0\0\u14dc\0\u1518"+
    "\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8"+
    "\0\74\0\u1734\0\u1770\0\u17ac\0\u17e8\0\264\0\u1824\0\u1860"+
    "\0\u189c\0\u18d8\0\u1914\0\u1950\0\264\0\u198c\0\u19c8\0\u1a04"+
    "\0\264\0\u1a40\0\264\0\u1a7c\0\264\0\u1ab8\0\u1af4\0\u1b30"+
    "\0\u1b6c\0\264\0\264\0\u1ba8\0\264\0\u1be4\0\u1c20\0\264"+
    "\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\74\0\u1dc4"+
    "\0\u1e00\0\264\0\u1e3c\0\u1e78\0\u1eb4\0\264\0\u1ef0\0\u1f2c"+
    "\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\264\0\u2058\0\u2094\0\u20d0"+
    "\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238\0\264\0\264"+
    "\0\u2274\0\264\0\u22b0\0\u22ec\0\264\0\u2328\0\u2364\0\u23a0"+
    "\0\264\0\u23dc\0\u2418\0\74\0\264\0\74\0\u2454\0\u2490"+
    "\0\u24cc\0\u2508\0\u2544\0\u2580\0\264\0\264\0\u25bc\0\u25f8"+
    "\0\264\0\264\0\u2634\0\u2670\0\264\0\264\0\264\0\u26ac"+
    "\0\u26e8\0\264\0\u2724\0\264\0\u2760\0\u279c\0\264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\3\1\7"+
    "\1\10\1\11\1\12\1\13\3\4\1\14\1\15\1\16"+
    "\2\4\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\4\1\31\1\32\3\4\1\33"+
    "\1\34\3\4\1\35\1\36\2\4\1\37\1\40\1\41"+
    "\1\42\1\2\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\75\0\1\3\4\0\1\3"+
    "\67\0\2\4\7\0\17\4\2\0\21\4\3\0\1\4"+
    "\16\0\1\5\4\0\1\55\63\0\4\56\1\57\1\60"+
    "\66\56\5\61\1\62\1\61\1\0\64\61\10\0\1\63"+
    "\75\0\1\64\63\0\2\4\7\0\1\4\1\65\15\4"+
    "\2\0\21\4\3\0\1\4\15\0\2\4\7\0\1\4"+
    "\1\66\10\4\1\67\4\4\2\0\21\4\3\0\1\4"+
    "\15\0\2\4\7\0\10\4\1\70\6\4\2\0\21\4"+
    "\3\0\1\4\15\0\2\4\7\0\4\4\1\71\3\4"+
    "\1\72\4\4\1\73\1\4\2\0\21\4\3\0\1\4"+
    "\15\0\2\4\7\0\1\74\3\4\1\75\12\4\2\0"+
    "\21\4\3\0\1\4\15\0\2\4\7\0\4\4\1\76"+
    "\3\4\1\77\2\4\1\100\3\4\2\0\3\4\1\101"+
    "\15\4\3\0\1\4\15\0\2\4\7\0\1\102\14\4"+
    "\1\103\1\4\2\0\21\4\3\0\1\4\15\0\2\4"+
    "\7\0\2\4\1\104\12\4\1\105\1\4\2\0\21\4"+
    "\3\0\1\4\15\0\2\4\7\0\1\4\1\106\15\4"+
    "\2\0\21\4\3\0\1\4\15\0\2\4\7\0\15\4"+
    "\1\107\1\4\2\0\21\4\3\0\1\4\45\0\1\110"+
    "\116\0\1\111\20\0\2\4\7\0\10\4\1\112\4\4"+
    "\1\113\1\4\2\0\2\4\1\114\16\4\3\0\1\4"+
    "\15\0\2\4\7\0\17\4\2\0\1\115\20\4\3\0"+
    "\1\4\15\0\2\4\7\0\17\4\2\0\2\4\1\116"+
    "\16\4\3\0\1\4\15\0\2\4\7\0\17\4\2\0"+
    "\5\4\1\117\13\4\3\0\1\4\15\0\2\4\7\0"+
    "\17\4\2\0\21\4\3\0\1\4\1\120\14\0\2\4"+
    "\7\0\17\4\2\0\4\4\1\121\14\4\3\0\1\4"+
    "\15\0\2\4\7\0\17\4\2\0\10\4\1\122\10\4"+
    "\3\0\1\4\15\0\2\4\7\0\15\4\1\123\1\4"+
    "\2\0\21\4\3\0\1\4\46\0\1\124\21\0\1\125"+
    "\73\0\1\126\73\0\1\127\1\0\1\130\16\0\2\4"+
    "\7\0\17\4\2\0\21\4\3\0\1\4\1\131\74\0"+
    "\1\132\14\0\1\133\70\0\4\56\1\134\1\60\66\56"+
    "\7\0\1\135\64\0\6\61\1\0\1\136\64\61\12\64"+
    "\1\137\61\64\2\0\2\4\7\0\1\140\13\4\1\141"+
    "\2\4\2\0\21\4\3\0\1\4\15\0\2\4\7\0"+
    "\2\4\1\142\14\4\2\0\21\4\3\0\1\4\15\0"+
    "\2\4\7\0\12\4\1\143\4\4\2\0\21\4\3\0"+
    "\1\4\15\0\2\4\7\0\17\4\2\0\2\4\1\144"+
    "\16\4\3\0\1\4\15\0\2\4\7\0\1\145\16\4"+
    "\2\0\21\4\3\0\1\4\15\0\2\4\7\0\16\4"+
    "\1\146\2\0\21\4\3\0\1\4\15\0\2\4\7\0"+
    "\2\4\1\147\14\4\2\0\1\150\20\4\3\0\1\4"+
    "\15\0\2\4\7\0\1\4\1\151\15\4\2\0\21\4"+
    "\3\0\1\4\15\0\2\4\7\0\13\4\1\152\3\4"+
    "\2\0\21\4\3\0\1\4\15\0\2\4\7\0\6\4"+
    "\1\153\10\4\2\0\21\4\3\0\1\4\15\0\2\4"+
    "\7\0\6\4\1\154\10\4\2\0\1\155\20\4\3\0"+
    "\1\4\15\0\2\4\7\0\4\4\1\156\12\4\2\0"+
    "\21\4\3\0\1\4\15\0\2\4\7\0\4\4\1\157"+
    "\12\4\2\0\21\4\3\0\1\4\15\0\2\4\7\0"+
    "\5\4\1\160\11\4\2\0\21\4\3\0\1\4\15\0"+
    "\2\4\7\0\10\4\1\161\6\4\2\0\21\4\3\0"+
    "\1\4\15\0\2\4\7\0\13\4\1\162\3\4\2\0"+
    "\21\4\3\0\1\4\15\0\2\4\7\0\13\4\1\163"+
    "\3\4\2\0\21\4\3\0\1\4\15\0\2\4\7\0"+
    "\2\4\1\164\7\4\1\165\4\4\2\0\21\4\3\0"+
    "\1\4\15\0\2\4\7\0\17\4\2\0\16\4\1\166"+
    "\2\4\3\0\1\4\15\0\2\4\7\0\1\4\1\167"+
    "\15\4\2\0\21\4\3\0\1\4\15\0\2\4\7\0"+
    "\4\4\1\170\5\4\1\171\4\4\2\0\21\4\3\0"+
    "\1\4\15\0\2\4\7\0\17\4\2\0\17\4\1\172"+
    "\1\4\3\0\1\4\15\0\2\4\7\0\10\4\1\173"+
    "\6\4\2\0\21\4\3\0\1\4\15\0\2\4\7\0"+
    "\1\174\16\4\2\0\21\4\3\0\1\4\15\0\2\4"+
    "\7\0\17\4\2\0\6\4\1\175\12\4\3\0\1\4"+
    "\15\0\2\4\7\0\17\4\2\0\11\4\1\176\7\4"+
    "\3\0\1\4\15\0\2\4\7\0\17\4\2\0\14\4"+
    "\1\177\4\4\3\0\1\4\15\0\2\4\7\0\17\4"+
    "\2\0\1\200\20\4\3\0\1\4\13\0\11\64\1\201"+
    "\1\202\61\64\2\0\2\4\7\0\2\4\1\203\14\4"+
    "\2\0\21\4\3\0\1\4\15\0\2\4\7\0\2\4"+
    "\1\204\14\4\2\0\21\4\3\0\1\4\15\0\2\4"+
    "\7\0\15\4\1\205\1\4\2\0\21\4\3\0\1\4"+
    "\15\0\2\4\7\0\13\4\1\206\3\4\2\0\21\4"+
    "\3\0\1\4\15\0\2\4\7\0\1\4\1\207\15\4"+
    "\2\0\21\4\3\0\1\4\15\0\2\4\7\0\1\210"+
    "\16\4\2\0\21\4\3\0\1\4\15\0\2\4\7\0"+
    "\17\4\1\211\1\0\21\4\3\0\1\4\15\0\2\4"+
    "\7\0\10\4\1\212\6\4\2\0\21\4\3\0\1\4"+
    "\15\0\2\4\7\0\3\4\1\213\13\4\2\0\21\4"+
    "\3\0\1\4\15\0\2\4\7\0\14\4\1\214\2\4"+
    "\2\0\21\4\3\0\1\4\15\0\2\4\7\0\4\4"+
    "\1\215\12\4\2\0\21\4\3\0\1\4\15\0\2\4"+
    "\7\0\17\4\2\0\1\4\1\216\17\4\3\0\1\4"+
    "\15\0\2\4\7\0\17\4\2\0\1\4\1\217\17\4"+
    "\3\0\1\4\15\0\2\4\7\0\14\4\1\220\2\4"+
    "\2\0\21\4\3\0\1\4\15\0\2\4\7\0\17\4"+
    "\2\0\1\221\20\4\3\0\1\4\15\0\2\4\7\0"+
    "\17\4\2\0\1\222\20\4\3\0\1\4\15\0\2\4"+
    "\7\0\1\4\1\223\15\4\2\0\21\4\3\0\1\4"+
    "\15\0\2\4\7\0\10\4\1\224\6\4\2\0\21\4"+
    "\3\0\1\4\15\0\2\4\7\0\11\4\1\225\5\4"+
    "\2\0\21\4\3\0\1\4\15\0\2\4\7\0\15\4"+
    "\1\226\1\4\2\0\21\4\3\0\1\4\15\0\2\4"+
    "\7\0\10\4\1\227\6\4\2\0\21\4\3\0\1\4"+
    "\15\0\2\4\7\0\16\4\1\230\2\0\21\4\3\0"+
    "\1\4\15\0\2\4\7\0\12\4\1\231\4\4\2\0"+
    "\21\4\3\0\1\4\15\0\2\4\7\0\1\232\16\4"+
    "\2\0\21\4\3\0\1\4\15\0\2\4\7\0\17\4"+
    "\2\0\17\4\1\233\1\4\3\0\1\4\15\0\2\4"+
    "\7\0\2\4\1\234\14\4\2\0\21\4\3\0\1\4"+
    "\15\0\2\4\7\0\17\4\2\0\1\235\20\4\3\0"+
    "\1\4\15\0\2\4\7\0\17\4\2\0\7\4\1\236"+
    "\11\4\3\0\1\4\15\0\2\4\7\0\17\4\2\0"+
    "\12\4\1\237\6\4\3\0\1\4\15\0\2\4\7\0"+
    "\17\4\2\0\15\4\1\240\3\4\3\0\1\4\15\0"+
    "\2\4\7\0\16\4\1\241\2\0\21\4\3\0\1\4"+
    "\13\0\11\64\1\0\1\202\61\64\2\0\2\4\7\0"+
    "\3\4\1\242\13\4\2\0\21\4\3\0\1\4\15\0"+
    "\2\4\7\0\1\243\16\4\2\0\21\4\3\0\1\4"+
    "\15\0\2\4\7\0\16\4\1\244\2\0\21\4\3\0"+
    "\1\4\15\0\2\4\7\0\7\4\1\245\7\4\2\0"+
    "\21\4\3\0\1\4\15\0\2\4\7\0\11\4\1\246"+
    "\5\4\2\0\21\4\3\0\1\4\46\0\1\247\42\0"+
    "\2\4\7\0\16\4\1\250\2\0\21\4\3\0\1\4"+
    "\15\0\2\4\7\0\4\4\1\251\12\4\2\0\21\4"+
    "\3\0\1\4\15\0\2\4\7\0\10\4\1\252\6\4"+
    "\2\0\21\4\3\0\1\4\15\0\2\4\7\0\10\4"+
    "\1\253\6\4\2\0\21\4\3\0\1\4\15\0\2\4"+
    "\7\0\14\4\1\254\2\4\2\0\21\4\3\0\1\4"+
    "\15\0\2\4\7\0\14\4\1\255\2\4\2\0\21\4"+
    "\3\0\1\4\15\0\2\4\7\0\15\4\1\256\1\4"+
    "\2\0\21\4\3\0\1\4\15\0\2\4\7\0\17\4"+
    "\2\0\1\257\20\4\3\0\1\4\15\0\2\4\7\0"+
    "\17\4\2\0\1\260\20\4\3\0\1\4\15\0\2\4"+
    "\7\0\13\4\1\261\3\4\2\0\21\4\3\0\1\4"+
    "\15\0\2\4\7\0\4\4\1\262\12\4\2\0\21\4"+
    "\3\0\1\4\15\0\2\4\7\0\12\4\1\263\4\4"+
    "\2\0\21\4\3\0\1\4\15\0\2\4\7\0\15\4"+
    "\1\264\1\4\2\0\21\4\3\0\1\4\15\0\2\4"+
    "\7\0\17\4\2\0\10\4\1\265\10\4\3\0\1\4"+
    "\15\0\2\4\7\0\17\4\2\0\11\4\1\266\7\4"+
    "\3\0\1\4\15\0\2\4\7\0\4\4\1\267\12\4"+
    "\2\0\21\4\3\0\1\4\15\0\2\4\7\0\4\4"+
    "\1\270\12\4\2\0\21\4\3\0\1\4\15\0\2\4"+
    "\7\0\1\4\1\271\15\4\2\0\21\4\3\0\1\4"+
    "\15\0\2\4\7\0\17\4\1\272\1\0\21\4\3\0"+
    "\1\4\15\0\2\4\7\0\10\4\1\273\6\4\2\0"+
    "\21\4\3\0\1\4\15\0\2\4\7\0\17\4\1\274"+
    "\1\0\21\4\3\0\1\4\15\0\2\4\7\0\15\4"+
    "\1\275\1\4\2\0\21\4\3\0\1\4\15\0\2\4"+
    "\7\0\5\4\1\276\11\4\2\0\21\4\3\0\1\4"+
    "\15\0\2\4\7\0\17\4\2\0\1\277\20\4\3\0"+
    "\1\4\15\0\2\4\7\0\15\4\1\300\1\4\2\0"+
    "\21\4\3\0\1\4\15\0\2\4\7\0\3\4\1\301"+
    "\13\4\2\0\21\4\3\0\1\4\15\0\2\4\7\0"+
    "\10\4\1\302\6\4\2\0\21\4\3\0\1\4\15\0"+
    "\2\4\7\0\17\4\2\0\1\303\20\4\3\0\1\4"+
    "\15\0\2\4\7\0\17\4\2\0\16\4\1\304\2\4"+
    "\3\0\1\4\15\0\2\4\7\0\17\4\2\0\1\305"+
    "\20\4\3\0\1\4\15\0\2\4\7\0\1\306\16\4"+
    "\2\0\21\4\3\0\1\4\15\0\2\4\7\0\12\4"+
    "\1\307\4\4\2\0\21\4\3\0\1\4\15\0\2\4"+
    "\7\0\17\4\2\0\13\4\1\310\5\4\3\0\1\4"+
    "\15\0\2\4\7\0\16\4\1\311\2\0\21\4\3\0"+
    "\1\4\15\0\2\4\7\0\5\4\1\312\11\4\2\0"+
    "\21\4\3\0\1\4\15\0\2\4\7\0\2\4\1\313"+
    "\14\4\2\0\21\4\3\0\1\4\46\0\1\314\42\0"+
    "\2\4\7\0\10\4\1\315\6\4\2\0\21\4\3\0"+
    "\1\4\46\0\1\316\42\0\2\4\7\0\4\4\1\317"+
    "\12\4\2\0\21\4\3\0\1\4\15\0\2\4\7\0"+
    "\1\320\16\4\2\0\21\4\3\0\1\4\15\0\2\4"+
    "\7\0\4\4\1\321\12\4\2\0\21\4\3\0\1\4"+
    "\15\0\2\4\7\0\4\4\1\322\12\4\2\0\21\4"+
    "\3\0\1\4\15\0\2\4\7\0\15\4\1\323\1\4"+
    "\2\0\21\4\3\0\1\4\15\0\2\4\7\0\10\4"+
    "\1\324\6\4\2\0\21\4\3\0\1\4\15\0\2\4"+
    "\7\0\2\4\1\325\14\4\2\0\21\4\3\0\1\4"+
    "\15\0\2\4\7\0\17\4\2\0\14\4\1\326\4\4"+
    "\3\0\1\4\15\0\2\4\7\0\1\327\16\4\2\0"+
    "\21\4\3\0\1\4\15\0\2\4\7\0\10\4\1\330"+
    "\6\4\2\0\21\4\3\0\1\4\15\0\2\4\7\0"+
    "\17\4\2\0\1\331\20\4\3\0\1\4\15\0\2\4"+
    "\7\0\2\4\1\332\14\4\2\0\21\4\3\0\1\4"+
    "\15\0\2\4\7\0\5\4\1\333\11\4\2\0\21\4"+
    "\3\0\1\4\15\0\2\4\7\0\16\4\1\334\2\0"+
    "\21\4\3\0\1\4\15\0\2\4\7\0\17\4\2\0"+
    "\1\335\20\4\3\0\1\4\15\0\2\4\7\0\1\4"+
    "\1\336\15\4\2\0\21\4\3\0\1\4\15\0\2\4"+
    "\7\0\2\4\1\337\14\4\2\0\21\4\3\0\1\4"+
    "\15\0\2\4\7\0\17\4\2\0\20\4\1\340\3\0"+
    "\1\4\15\0\2\4\7\0\1\341\16\4\2\0\21\4"+
    "\3\0\1\4\15\0\2\4\7\0\10\4\1\342\6\4"+
    "\2\0\21\4\3\0\1\4\15\0\2\4\7\0\1\343"+
    "\16\4\2\0\21\4\3\0\1\4\15\0\2\4\7\0"+
    "\2\4\1\344\14\4\2\0\21\4\3\0\1\4\15\0"+
    "\2\4\7\0\1\4\1\345\15\4\2\0\21\4\3\0"+
    "\1\4\15\0\2\4\7\0\4\4\1\346\12\4\2\0"+
    "\21\4\3\0\1\4\15\0\2\4\7\0\13\4\1\347"+
    "\3\4\2\0\21\4\3\0\1\4\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10200];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\7\1\1\11\31\1\11\11\2\0\1\11"+
    "\3\0\1\11\1\0\23\1\2\11\6\1\1\11\3\1"+
    "\7\11\2\1\1\11\1\1\1\0\41\1\1\11\1\0"+
    "\6\1\1\0\35\1\1\11\22\1\1\0\1\1\1\0"+
    "\17\1\1\11\1\1\1\11\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private  String lexema;  // Variable pública para almacenar el lexema
    public String getLexema() {
        return lexema;
    }
    
    // Métodos para acceder a posición
    public int getLinea() { return yyline; }
    public int getColumna() { return yycolumn; }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 162) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 44: 
          { lexema = yytext(); return LEON;
          }
        case 73: break;
        case 63: 
          { lexema = yytext(); return INICIAR;
          }
        case 74: break;
        case 69: 
          { lexema = yytext(); return INIT_HABIT;
          }
        case 75: break;
        case 66: 
          { lexema = yytext(); return FIN_HABIT;
          }
        case 76: break;
        case 21: 
          { lexema = yytext(); return DOS_PUNTOS;
          }
        case 77: break;
        case 46: 
          { lexema = yytext(); return RECI;
          }
        case 78: break;
        case 45: 
          { lexema = yytext(); return SELF;
          }
        case 79: break;
        case 31: 
          { lexema = yytext(); return DIFERENTE;
          }
        case 80: break;
        case 24: 
          { lexema = yytext(); return PUNTO_PUNTO;
          }
        case 81: break;
        case 16: 
          { lexema = yytext(); return LLAVE_IZQ;
          }
        case 82: break;
        case 19: 
          { lexema = yytext(); return CORCHETE_DER;
          }
        case 83: break;
        case 2: 
          { /* Ignorar espacios */
          }
        case 84: break;
        case 30: 
          { lexema = yytext(); return IGUAL_IGUAL;
          }
        case 85: break;
        case 40: 
          { lexema = yytext(); return COMENTARIO;
          }
        case 86: break;
        case 22: 
          { lexema = yytext(); return COMA;
          }
        case 87: break;
        case 54: 
          { lexema = yytext(); return COMPOR;
          }
        case 88: break;
        case 20: 
          { lexema = yytext(); return PUNTO_COMA;
          }
        case 89: break;
        case 27: 
          { lexema = yytext(); return MAYOR_IGUAL;
          }
        case 90: break;
        case 28: 
          { lexema = yytext(); return OR;
          }
        case 91: break;
        case 47: 
          { lexema = yytext(); return RUGIR;
          }
        case 92: break;
        case 55: 
          { lexema = yytext(); return CORPSE;
          }
        case 93: break;
        case 5: 
          { lexema = yytext(); return PUNTO;
          }
        case 94: break;
        case 52: 
          { lexema = yytext(); return LIBRE;
          }
        case 95: break;
        case 13: 
          { lexema = yytext(); return SUMA;
          }
        case 96: break;
        case 33: 
          { lexema = yytext(); return CONCATENACION;
          }
        case 97: break;
        case 41: 
          { lexema = yytext(); return BOUL;
          }
        case 98: break;
        case 50: 
          { lexema = yytext(); return METODO;
          }
        case 99: break;
        case 6: 
          { lexema = yytext(); return DIVISION;
          }
        case 100: break;
        case 38: 
          { lexema = yytext(); return ANT;
          }
        case 101: break;
        case 25: 
          { lexema = yytext(); return ME;
          }
        case 102: break;
        case 60: 
          { lexema = yytext(); return MAIN_ZOOP;
          }
        case 103: break;
        case 51: 
          { lexema = yytext(); return FALSO;
          }
        case 104: break;
        case 12: 
          { lexema = yytext(); return MENOR;
          }
        case 105: break;
        case 57: 
          { lexema = yytext(); return RONDAR;
          }
        case 106: break;
        case 39: 
          { lexema = yytext(); return ENT;
          }
        case 107: break;
        case 7: 
          { lexema = yytext(); return MULTIPLICACION;
          }
        case 108: break;
        case 9: 
          { lexema = yytext(); return MAYOR;
          }
        case 109: break;
        case 17: 
          { lexema = yytext(); return LLAVE_DER;
          }
        case 110: break;
        case 14: 
          { lexema = yytext(); return PARENTESIS_IZQ;
          }
        case 111: break;
        case 72: 
          { lexema = yytext(); return INSTINTO_FINAL;
          }
        case 112: break;
        case 43: 
          { lexema = yytext(); return CHAR;
          }
        case 113: break;
        case 61: 
          { lexema = yytext(); return MODIFICAR;
          }
        case 114: break;
        case 53: 
          { lexema = yytext(); return NUEVO;
          }
        case 115: break;
        case 56: 
          { lexema = yytext(); return STLORO;
          }
        case 116: break;
        case 37: 
          { lexema = yytext(); return LIT_CHAR;
          }
        case 117: break;
        case 58: 
          { lexema = yytext(); return VERDAD;
          }
        case 118: break;
        case 11: 
          { lexema = yytext(); return NOT;
          }
        case 119: break;
        case 3: 
          { lexema = yytext(); return ID;
          }
        case 120: break;
        case 59: 
          { lexema = yytext(); return ACCEDER;
          }
        case 121: break;
        case 70: 
          { lexema = yytext(); return ENCERRADO;
          }
        case 122: break;
        case 35: 
          { lexema = yytext(); return INCREMENTO;
          }
        case 123: break;
        case 71: 
          { lexema = yytext(); return CLASS_HABIT;
          }
        case 124: break;
        case 49: 
          { lexema = yytext(); return TORT;
          }
        case 125: break;
        case 36: 
          { lexema = yytext(); return LIT_REAL;
          }
        case 126: break;
        case 67: 
          { lexema = yytext(); return DEVOLVER;
          }
        case 127: break;
        case 48: 
          { lexema = yytext(); return HUIR;
          }
        case 128: break;
        case 29: 
          { lexema = yytext(); return ASIGNACION_ESPECIAL;
          }
        case 129: break;
        case 18: 
          { lexema = yytext(); return CORCHETE_IZQ;
          }
        case 130: break;
        case 23: 
          { lexema = yytext(); return LIT_STRING;
          }
        case 131: break;
        case 42: 
          { lexema = yytext(); return CAMA;
          }
        case 132: break;
        case 1: 
          { lexema = yytext(); return ERROR;
          }
        case 133: break;
        case 4: 
          { lexema = yytext(); return LIT_ENT;
          }
        case 134: break;
        case 62: 
          { lexema = yytext(); return PROTECT;
          }
        case 135: break;
        case 68: 
          { lexema = yytext(); return REACCION;
          }
        case 136: break;
        case 32: 
          { lexema = yytext(); return MENOR_IGUAL;
          }
        case 137: break;
        case 10: 
          { lexema = yytext(); return ASIGNACION;
          }
        case 138: break;
        case 15: 
          { lexema = yytext(); return PARENTESIS_DER;
          }
        case 139: break;
        case 65: 
          { lexema = yytext(); return MERODEAR;
          }
        case 140: break;
        case 64: 
          { lexema = yytext(); return INSTINTO;
          }
        case 141: break;
        case 8: 
          { lexema = yytext(); return RESTA;
          }
        case 142: break;
        case 34: 
          { lexema = yytext(); return AND;
          }
        case 143: break;
        case 26: 
          { lexema = yytext(); return DECREMENTO;
          }
        case 144: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return EOF;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
