/* The following code was generated by JFlex 1.4.3 on 09/05/2025, 03:48 */

package codigo;
import static codigo.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 09/05/2025, 03:48 from the specification file
 * <tt>src/codigo/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\2\0\1\1\22\0\1\1\1\57\1\6\4\0"+
    "\1\10\1\64\1\65\1\14\1\63\1\74\1\4\1\12\1\13\12\11"+
    "\1\73\1\72\1\60\1\56\1\35\2\0\1\46\1\5\1\27\1\5"+
    "\1\42\1\55\1\5\1\20\1\45\4\5\1\40\1\44\2\5\1\47"+
    "\1\5\1\52\1\41\1\43\3\5\1\24\1\70\1\7\1\71\1\0"+
    "\1\3\1\0\1\21\1\22\1\32\1\34\1\33\1\26\1\54\1\36"+
    "\1\15\2\3\1\30\1\23\1\16\1\25\1\50\1\3\1\37\1\31"+
    "\1\17\1\51\1\53\2\3\1\61\1\3\1\66\1\0\1\67\43\0"+
    "\1\62\uff5e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\1\1\6"+
    "\1\7\1\10\1\11\7\3\1\5\5\3\1\12\2\3"+
    "\2\5\1\3\1\5\1\3\1\13\1\14\1\15\1\3"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\0\1\31\4\0\1\32\1\0"+
    "\7\3\1\33\1\34\2\3\1\5\11\3\1\35\4\3"+
    "\2\5\1\3\1\5\1\3\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\31\2\44\1\45\1\0\3\3\1\46"+
    "\10\3\1\5\10\3\1\47\7\3\2\5\1\3\1\5"+
    "\1\3\1\50\1\0\2\3\1\51\1\3\1\52\6\3"+
    "\1\5\1\3\1\53\1\3\1\54\1\55\2\3\1\56"+
    "\2\3\1\57\2\3\1\60\1\61\2\5\1\3\1\62"+
    "\6\3\1\63\2\3\1\64\1\5\1\65\7\3\1\66"+
    "\1\5\11\3\1\5\1\67\1\70\1\71\2\3\1\72"+
    "\1\3\1\5\1\3\1\73\2\3\1\74\1\75\1\76"+
    "\2\3\1\5\3\3\1\77\1\100\1\3\1\101\1\102"+
    "\1\103\1\5\1\3\1\104\1\105\1\106\1\3\1\5"+
    "\1\107\1\3\1\110\2\3\1\111";

  private static int [] zzUnpackAction() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\75\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726"+
    "\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\75\0\75"+
    "\0\75\0\75\0\75\0\75\0\75\0\75\0\75\0\75"+
    "\0\u016e\0\75\0\u08d1\0\u090e\0\u094b\0\u0988\0\75\0\u09c5"+
    "\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad"+
    "\0\75\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58"+
    "\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\75\0\u0ec6\0\u0f03"+
    "\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae\0\75"+
    "\0\75\0\75\0\75\0\75\0\75\0\u016e\0\75\0\u090e"+
    "\0\u0988\0\u10eb\0\u1128\0\u1165\0\u11a2\0\267\0\u11df\0\u121c"+
    "\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404"+
    "\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\267"+
    "\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797"+
    "\0\u17d4\0\u1811\0\u184e\0\u188b\0\75\0\u18c8\0\u1905\0\u1942"+
    "\0\267\0\u197f\0\267\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0"+
    "\0\u1aed\0\u1b2a\0\u1b67\0\267\0\u1ba4\0\267\0\267\0\u1be1"+
    "\0\u1c1e\0\267\0\u1c5b\0\u1c98\0\267\0\u1cd5\0\u1d12\0\267"+
    "\0\267\0\u1d4f\0\u1d8c\0\u1dc9\0\u0131\0\u1e06\0\u1e43\0\u1e80"+
    "\0\u1ebd\0\u1efa\0\u1f37\0\75\0\u1f74\0\u1fb1\0\267\0\u1fee"+
    "\0\267\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f\0\u215c\0\u2199"+
    "\0\u0131\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307\0\u2344"+
    "\0\u2381\0\u23be\0\u23fb\0\u2438\0\267\0\267\0\267\0\u2475"+
    "\0\u24b2\0\267\0\u24ef\0\u252c\0\u2569\0\267\0\u25a6\0\u25e3"+
    "\0\75\0\267\0\75\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714"+
    "\0\u2751\0\u0131\0\267\0\u278e\0\u27cb\0\267\0\267\0\u2808"+
    "\0\u2845\0\267\0\267\0\267\0\u2882\0\u28bf\0\267\0\u28fc"+
    "\0\u0131\0\u2939\0\u2976\0\267";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\4\1\6"+
    "\1\17\1\20\1\21\1\6\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\4\6\1\36\2\6\1\37\1\4\1\40\1\41\1\4"+
    "\1\6\1\42\1\43\1\44\1\45\1\2\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\76\0\2\3\75\0\3\4\3\0\1\4\3\0\20\4"+
    "\1\0\20\4\3\0\1\4\17\0\1\60\73\0\3\6"+
    "\3\0\1\6\3\0\20\6\1\0\20\6\3\0\1\6"+
    "\13\0\6\61\1\62\1\63\65\61\7\64\1\65\1\0"+
    "\64\64\11\0\1\11\1\66\74\0\1\67\76\0\1\70"+
    "\63\0\3\4\3\0\1\4\3\0\1\4\1\71\16\4"+
    "\1\0\20\4\3\0\1\4\16\0\3\4\3\0\1\4"+
    "\3\0\20\4\1\0\13\4\1\72\4\4\3\0\1\4"+
    "\16\0\3\4\3\0\1\4\3\0\1\4\1\73\13\4"+
    "\1\74\2\4\1\0\20\4\3\0\1\4\16\0\3\4"+
    "\3\0\1\4\3\0\10\4\1\75\7\4\1\0\20\4"+
    "\3\0\1\4\16\0\3\4\3\0\1\4\3\0\4\4"+
    "\1\76\3\4\1\77\5\4\1\100\1\4\1\0\20\4"+
    "\3\0\1\4\16\0\3\4\3\0\1\4\3\0\20\4"+
    "\1\0\20\4\3\0\1\4\1\101\15\0\3\4\3\0"+
    "\1\4\3\0\1\102\3\4\1\103\13\4\1\0\20\4"+
    "\3\0\1\4\16\0\3\6\3\0\1\6\3\0\13\6"+
    "\1\104\4\6\1\0\20\6\3\0\1\6\16\0\3\4"+
    "\3\0\1\4\3\0\1\105\15\4\1\106\1\4\1\0"+
    "\20\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\2\4\1\107\13\4\1\110\1\4\1\0\20\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\4\4\1\111"+
    "\3\4\1\112\7\4\1\0\1\113\17\4\3\0\1\4"+
    "\16\0\3\4\3\0\1\4\3\0\1\4\1\114\16\4"+
    "\1\0\20\4\3\0\1\4\16\0\3\4\3\0\1\4"+
    "\3\0\16\4\1\115\1\4\1\0\20\4\3\0\1\4"+
    "\71\0\1\116\21\0\3\4\3\0\1\4\3\0\20\4"+
    "\1\0\13\4\1\117\4\4\3\0\1\4\16\0\3\4"+
    "\3\0\1\4\3\0\10\4\1\120\5\4\1\121\1\4"+
    "\1\0\13\4\1\122\4\4\3\0\1\4\16\0\3\6"+
    "\3\0\1\6\3\0\20\6\1\0\3\6\1\123\14\6"+
    "\3\0\1\6\16\0\3\6\3\0\1\6\3\0\20\6"+
    "\1\0\2\6\1\124\15\6\3\0\1\6\16\0\3\4"+
    "\3\0\1\4\3\0\20\4\1\0\1\4\1\125\16\4"+
    "\3\0\1\4\16\0\3\6\3\0\1\6\3\0\20\6"+
    "\1\0\6\6\1\126\11\6\3\0\1\6\16\0\3\4"+
    "\3\0\1\4\3\0\16\4\1\127\1\4\1\0\20\4"+
    "\3\0\1\4\50\0\1\130\20\0\1\131\74\0\1\132"+
    "\74\0\1\133\21\0\3\4\3\0\1\4\3\0\20\4"+
    "\1\0\20\4\3\0\1\4\1\134\75\0\1\135\11\0"+
    "\6\61\1\136\1\63\65\61\10\0\1\137\64\0\2\64"+
    "\1\0\5\64\1\140\64\64\11\0\1\141\63\0\14\70"+
    "\1\142\60\70\3\0\3\4\3\0\1\4\3\0\1\143"+
    "\13\4\1\144\3\4\1\0\20\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\13\4\1\145\4\4\1\0"+
    "\20\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\2\4\1\146\15\4\1\0\20\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\15\4\1\147\2\4\1\0"+
    "\20\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\20\4\1\0\13\4\1\150\4\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\1\151\17\4\1\0\20\4"+
    "\3\0\1\4\16\0\3\4\3\0\1\4\3\0\17\4"+
    "\1\152\1\0\20\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\2\4\1\153\15\4\1\0\1\4\1\154"+
    "\16\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\1\4\1\155\16\4\1\0\20\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\13\4\1\156\4\4\1\0"+
    "\20\4\3\0\1\4\16\0\3\6\3\0\1\6\3\0"+
    "\4\6\1\157\13\6\1\0\20\6\3\0\1\6\16\0"+
    "\3\4\3\0\1\4\3\0\5\4\1\160\12\4\1\0"+
    "\20\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\10\4\1\161\7\4\1\0\20\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\13\4\1\162\4\4\1\0"+
    "\20\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\13\4\1\163\4\4\1\0\20\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\6\4\1\164\11\4\1\0"+
    "\20\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\6\4\1\165\11\4\1\0\1\4\1\166\16\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\4\4\1\167"+
    "\13\4\1\0\20\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\2\4\1\170\12\4\1\171\2\4\1\0"+
    "\20\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\20\4\1\0\15\4\1\172\2\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\1\173\17\4\1\0\20\4"+
    "\3\0\1\4\16\0\3\4\3\0\1\4\3\0\1\4"+
    "\1\174\16\4\1\0\20\4\3\0\1\4\16\0\3\4"+
    "\3\0\1\4\3\0\4\4\1\175\10\4\1\176\2\4"+
    "\1\0\20\4\3\0\1\4\16\0\3\4\3\0\1\4"+
    "\3\0\20\4\1\0\16\4\1\177\1\4\3\0\1\4"+
    "\16\0\3\6\3\0\1\6\3\0\20\6\1\0\4\6"+
    "\1\200\13\6\3\0\1\6\16\0\3\6\3\0\1\6"+
    "\3\0\20\6\1\0\7\6\1\201\10\6\3\0\1\6"+
    "\16\0\3\4\3\0\1\4\3\0\10\4\1\202\7\4"+
    "\1\0\20\4\3\0\1\4\16\0\3\6\3\0\1\6"+
    "\3\0\20\6\1\0\11\6\1\203\6\6\3\0\1\6"+
    "\16\0\3\4\3\0\1\4\3\0\20\4\1\0\1\4"+
    "\1\204\16\4\3\0\1\4\13\0\13\70\1\205\1\206"+
    "\60\70\3\0\3\4\3\0\1\4\3\0\2\4\1\207"+
    "\15\4\1\0\20\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\2\4\1\210\15\4\1\0\20\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\10\4\1\211"+
    "\7\4\1\0\20\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\16\4\1\212\1\4\1\0\20\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\13\4\1\213"+
    "\4\4\1\0\20\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\1\4\1\214\16\4\1\0\20\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\1\215\17\4"+
    "\1\0\20\4\3\0\1\4\16\0\1\4\1\216\1\4"+
    "\3\0\1\4\3\0\20\4\1\0\20\4\3\0\1\4"+
    "\16\0\3\4\3\0\1\4\3\0\10\4\1\217\7\4"+
    "\1\0\20\4\3\0\1\4\16\0\3\4\3\0\1\4"+
    "\3\0\3\4\1\220\14\4\1\0\20\4\3\0\1\4"+
    "\16\0\3\4\3\0\1\4\3\0\14\4\1\221\3\4"+
    "\1\0\20\4\3\0\1\4\16\0\3\6\3\0\1\6"+
    "\3\0\14\6\1\222\3\6\1\0\20\6\3\0\1\6"+
    "\16\0\3\4\3\0\1\4\3\0\20\4\1\0\1\4"+
    "\1\223\16\4\3\0\1\4\16\0\3\4\3\0\1\4"+
    "\3\0\1\4\1\224\16\4\1\0\20\4\3\0\1\4"+
    "\16\0\3\4\3\0\1\4\3\0\10\4\1\225\7\4"+
    "\1\0\20\4\3\0\1\4\16\0\3\4\3\0\1\4"+
    "\3\0\11\4\1\226\6\4\1\0\20\4\3\0\1\4"+
    "\16\0\3\4\3\0\1\4\3\0\4\4\1\227\13\4"+
    "\1\0\20\4\3\0\1\4\16\0\3\4\3\0\1\4"+
    "\3\0\20\4\1\0\12\4\1\230\5\4\3\0\1\4"+
    "\16\0\3\4\3\0\1\4\3\0\20\4\1\0\12\4"+
    "\1\231\5\4\3\0\1\4\16\0\3\4\3\0\1\4"+
    "\3\0\20\4\1\0\1\4\1\232\16\4\3\0\1\4"+
    "\16\0\3\4\3\0\1\4\3\0\16\4\1\233\1\4"+
    "\1\0\20\4\3\0\1\4\16\0\3\4\3\0\1\4"+
    "\3\0\10\4\1\234\7\4\1\0\20\4\3\0\1\4"+
    "\16\0\3\4\3\0\1\4\3\0\20\4\1\0\1\4"+
    "\1\235\16\4\3\0\1\4\16\0\3\4\3\0\1\4"+
    "\3\0\17\4\1\236\1\0\20\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\15\4\1\237\2\4\1\0"+
    "\20\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\1\240\17\4\1\0\20\4\3\0\1\4\16\0\3\4"+
    "\3\0\1\4\3\0\20\4\1\0\16\4\1\241\1\4"+
    "\3\0\1\4\16\0\3\6\3\0\1\6\3\0\20\6"+
    "\1\0\5\6\1\242\12\6\3\0\1\6\16\0\3\6"+
    "\3\0\1\6\3\0\12\6\1\243\5\6\1\0\20\6"+
    "\3\0\1\6\16\0\3\4\3\0\1\4\3\0\2\4"+
    "\1\244\15\4\1\0\20\4\3\0\1\4\16\0\3\6"+
    "\3\0\1\6\3\0\20\6\1\0\14\6\1\245\3\6"+
    "\3\0\1\6\16\0\3\4\3\0\1\4\3\0\17\4"+
    "\1\246\1\0\20\4\3\0\1\4\13\0\13\70\1\0"+
    "\1\206\60\70\3\0\3\4\3\0\1\4\3\0\3\4"+
    "\1\247\14\4\1\0\20\4\3\0\1\4\16\0\3\4"+
    "\3\0\1\4\3\0\1\250\17\4\1\0\20\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\17\4\1\251"+
    "\1\0\20\4\3\0\1\4\16\0\3\4\3\0\1\4"+
    "\3\0\7\4\1\252\10\4\1\0\20\4\3\0\1\4"+
    "\16\0\3\4\3\0\1\4\3\0\11\4\1\253\6\4"+
    "\1\0\20\4\3\0\1\4\16\0\3\4\3\0\1\4"+
    "\3\0\20\4\1\254\20\4\3\0\1\4\16\0\3\4"+
    "\3\0\1\4\3\0\17\4\1\255\1\0\20\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\4\4\1\256"+
    "\13\4\1\0\20\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\10\4\1\257\7\4\1\0\20\4\3\0"+
    "\1\4\16\0\3\6\3\0\1\6\3\0\14\6\1\260"+
    "\3\6\1\0\20\6\3\0\1\6\16\0\3\4\3\0"+
    "\1\4\3\0\16\4\1\261\1\4\1\0\20\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\20\4\1\0"+
    "\1\4\1\262\16\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\10\4\1\263\7\4\1\0\20\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\14\4\1\264"+
    "\3\4\1\0\20\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\20\4\1\0\1\4\1\265\16\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\13\4\1\266"+
    "\4\4\1\0\20\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\4\4\1\267\13\4\1\0\20\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\15\4\1\270"+
    "\2\4\1\0\20\4\3\0\1\4\16\0\3\6\3\0"+
    "\1\6\3\0\20\6\1\0\6\6\1\271\11\6\3\0"+
    "\1\6\16\0\3\6\3\0\1\6\3\0\20\6\1\0"+
    "\7\6\1\272\10\6\3\0\1\6\16\0\3\4\3\0"+
    "\1\4\3\0\16\4\1\273\1\4\1\0\20\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\4\4\1\274"+
    "\13\4\1\0\20\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\4\4\1\275\13\4\1\0\20\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\1\4\1\276"+
    "\16\4\1\0\20\4\3\0\1\4\16\0\1\4\1\277"+
    "\1\4\3\0\1\4\3\0\20\4\1\0\20\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\10\4\1\300"+
    "\7\4\1\0\20\4\3\0\1\4\16\0\1\4\1\301"+
    "\1\4\3\0\1\4\3\0\20\4\1\0\20\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\16\4\1\302"+
    "\1\4\1\0\20\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\5\4\1\303\12\4\1\0\20\4\3\0"+
    "\1\4\16\0\3\6\3\0\1\6\3\0\3\6\1\304"+
    "\14\6\1\0\20\6\3\0\1\6\16\0\3\4\3\0"+
    "\1\4\3\0\10\4\1\305\7\4\1\0\20\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\20\4\1\0"+
    "\1\4\1\306\16\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\16\4\1\307\1\4\1\0\20\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\20\4\1\0"+
    "\1\4\1\310\16\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\20\4\1\0\15\4\1\311\2\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\20\4\1\0"+
    "\1\4\1\312\16\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\1\313\17\4\1\0\20\4\3\0\1\4"+
    "\16\0\3\6\3\0\1\6\3\0\20\6\1\0\10\6"+
    "\1\314\7\6\3\0\1\6\16\0\3\4\3\0\1\4"+
    "\3\0\15\4\1\315\2\4\1\0\20\4\3\0\1\4"+
    "\16\0\3\4\3\0\1\4\3\0\17\4\1\316\1\0"+
    "\20\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\5\4\1\317\12\4\1\0\20\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\2\4\1\320\15\4\1\0"+
    "\20\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\20\4\1\321\20\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\10\4\1\322\7\4\1\0\20\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\20\4\1\323"+
    "\20\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\4\4\1\324\13\4\1\0\20\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\1\325\17\4\1\0\20\4"+
    "\3\0\1\4\16\0\3\6\3\0\1\6\3\0\4\6"+
    "\1\326\13\6\1\0\20\6\3\0\1\6\16\0\3\4"+
    "\3\0\1\4\3\0\4\4\1\327\13\4\1\0\20\4"+
    "\3\0\1\4\16\0\3\4\3\0\1\4\3\0\16\4"+
    "\1\330\1\4\1\0\20\4\3\0\1\4\16\0\3\4"+
    "\3\0\1\4\3\0\10\4\1\331\7\4\1\0\20\4"+
    "\3\0\1\4\16\0\3\6\3\0\1\6\3\0\20\6"+
    "\1\0\11\6\1\332\6\6\3\0\1\6\16\0\3\4"+
    "\3\0\1\4\3\0\2\4\1\333\15\4\1\0\20\4"+
    "\3\0\1\4\16\0\3\4\3\0\1\4\3\0\1\334"+
    "\17\4\1\0\20\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\10\4\1\335\7\4\1\0\20\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\20\4\1\0"+
    "\1\4\1\336\16\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\2\4\1\337\15\4\1\0\20\4\3\0"+
    "\1\4\16\0\3\6\3\0\1\6\3\0\5\6\1\340"+
    "\12\6\1\0\20\6\3\0\1\6\16\0\3\4\3\0"+
    "\1\4\3\0\17\4\1\341\1\0\20\4\3\0\1\4"+
    "\16\0\3\4\3\0\1\4\3\0\20\4\1\0\1\4"+
    "\1\342\16\4\3\0\1\4\16\0\3\4\3\0\1\4"+
    "\3\0\1\4\1\343\16\4\1\0\20\4\3\0\1\4"+
    "\16\0\3\4\3\0\1\4\3\0\2\4\1\344\15\4"+
    "\1\0\20\4\3\0\1\4\16\0\3\4\3\0\1\4"+
    "\3\0\20\4\1\0\17\4\1\345\3\0\1\4\16\0"+
    "\3\6\3\0\1\6\3\0\1\346\17\6\1\0\20\6"+
    "\3\0\1\6\16\0\3\4\3\0\1\4\3\0\10\4"+
    "\1\347\7\4\1\0\20\4\3\0\1\4\16\0\3\4"+
    "\3\0\1\4\3\0\1\350\17\4\1\0\20\4\3\0"+
    "\1\4\16\0\3\6\3\0\1\6\3\0\2\6\1\351"+
    "\15\6\1\0\20\6\3\0\1\6\16\0\3\4\3\0"+
    "\1\4\3\0\1\4\1\352\16\4\1\0\20\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\4\4\1\353"+
    "\13\4\1\0\20\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\13\4\1\354\4\4\1\0\20\4\3\0"+
    "\1\4\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10675];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\1\11\32\1\12\11\1\0\1\11"+
    "\4\0\1\11\1\0\10\1\1\11\14\1\1\11\11\1"+
    "\6\11\1\1\1\11\2\1\1\0\42\1\1\11\1\0"+
    "\45\1\1\11\44\1\1\11\1\1\1\11\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[236];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private  String lexema;  // Variable pública para almacenar el lexema
    public String getLexema() {
        return lexema;
    }
    
    // Métodos para acceder a posición
    public int getLinea() { return yyline; }
    public int getColumna() { return yycolumn; }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 43: 
          { lexema = yytext(); return LEON;
          }
        case 74: break;
        case 63: 
          { lexema = yytext(); return INICIAR;
          }
        case 75: break;
        case 70: 
          { lexema = yytext(); return INIT_HABIT;
          }
        case 76: break;
        case 67: 
          { lexema = yytext(); return FIN_HABIT;
          }
        case 77: break;
        case 41: 
          { lexema = yytext(); return LIT_NULO;
          }
        case 78: break;
        case 22: 
          { lexema = yytext(); return DOS_PUNTOS;
          }
        case 79: break;
        case 48: 
          { lexema = yytext(); return RECI;
          }
        case 80: break;
        case 44: 
          { lexema = yytext(); return SELF;
          }
        case 81: break;
        case 32: 
          { lexema = yytext(); return DIFERENTE;
          }
        case 82: break;
        case 26: 
          { lexema = yytext(); return PUNTO_PUNTO;
          }
        case 83: break;
        case 17: 
          { lexema = yytext(); return LLAVE_IZQ;
          }
        case 84: break;
        case 20: 
          { lexema = yytext(); return CORCHETE_DER;
          }
        case 85: break;
        case 2: 
          { /* Ignorar espacios */
          }
        case 86: break;
        case 31: 
          { lexema = yytext(); return IGUAL_IGUAL;
          }
        case 87: break;
        case 40: 
          { lexema = yytext(); return COMENTARIO;
          }
        case 88: break;
        case 23: 
          { lexema = yytext(); return COMA;
          }
        case 89: break;
        case 56: 
          { lexema = yytext(); return COMPOR;
          }
        case 90: break;
        case 21: 
          { lexema = yytext(); return PUNTO_COMA;
          }
        case 91: break;
        case 29: 
          { lexema = yytext(); return MAYOR_IGUAL;
          }
        case 92: break;
        case 28: 
          { lexema = yytext(); return OR;
          }
        case 93: break;
        case 49: 
          { lexema = yytext(); return RUGIR;
          }
        case 94: break;
        case 57: 
          { lexema = yytext(); return CORPSE;
          }
        case 95: break;
        case 7: 
          { lexema = yytext(); return PUNTO;
          }
        case 96: break;
        case 53: 
          { lexema = yytext(); return LIBRE;
          }
        case 97: break;
        case 14: 
          { lexema = yytext(); return SUMA;
          }
        case 98: break;
        case 42: 
          { lexema = yytext(); return BOUL;
          }
        case 99: break;
        case 5: 
          { lexema = yytext(); return ID_CLASE;
          }
        case 100: break;
        case 51: 
          { lexema = yytext(); return METODO;
          }
        case 101: break;
        case 8: 
          { lexema = yytext(); return DIVISION;
          }
        case 102: break;
        case 38: 
          { lexema = yytext(); return ANT;
          }
        case 103: break;
        case 27: 
          { lexema = yytext(); return ME;
          }
        case 104: break;
        case 61: 
          { lexema = yytext(); return MAIN_ZOOP;
          }
        case 105: break;
        case 52: 
          { lexema = yytext(); return FALSO;
          }
        case 106: break;
        case 13: 
          { lexema = yytext(); return MENOR;
          }
        case 107: break;
        case 58: 
          { lexema = yytext(); return RONDAR;
          }
        case 108: break;
        case 39: 
          { lexema = yytext(); return ENT;
          }
        case 109: break;
        case 9: 
          { lexema = yytext(); return MULTIPLICACION;
          }
        case 110: break;
        case 10: 
          { lexema = yytext(); return MAYOR;
          }
        case 111: break;
        case 18: 
          { lexema = yytext(); return LLAVE_DER;
          }
        case 112: break;
        case 15: 
          { lexema = yytext(); return PARENTESIS_IZQ;
          }
        case 113: break;
        case 73: 
          { lexema = yytext(); return INSTINTO_FINAL;
          }
        case 114: break;
        case 46: 
          { lexema = yytext(); return CHAR;
          }
        case 115: break;
        case 62: 
          { lexema = yytext(); return MODIFICAR;
          }
        case 116: break;
        case 54: 
          { lexema = yytext(); return NUEVO;
          }
        case 117: break;
        case 55: 
          { lexema = yytext(); return STLORO;
          }
        case 118: break;
        case 36: 
          { lexema = yytext(); return LIT_CHAR;
          }
        case 119: break;
        case 3: 
          { lexema = yytext(); return ID_VAR;
          }
        case 120: break;
        case 59: 
          { lexema = yytext(); return VERDAD;
          }
        case 121: break;
        case 12: 
          { lexema = yytext(); return NOT;
          }
        case 122: break;
        case 60: 
          { lexema = yytext(); return ACCEDER;
          }
        case 123: break;
        case 71: 
          { lexema = yytext(); return ENCERRADO;
          }
        case 124: break;
        case 35: 
          { lexema = yytext(); return INCREMENTO;
          }
        case 125: break;
        case 72: 
          { lexema = yytext(); return CLASS_HABIT;
          }
        case 126: break;
        case 50: 
          { lexema = yytext(); return TORT;
          }
        case 127: break;
        case 37: 
          { lexema = yytext(); return LIT_REAL;
          }
        case 128: break;
        case 68: 
          { lexema = yytext(); return DEVOLVER;
          }
        case 129: break;
        case 47: 
          { lexema = yytext(); return HUIR;
          }
        case 130: break;
        case 30: 
          { lexema = yytext(); return ASIGNACION_ESPECIAL;
          }
        case 131: break;
        case 19: 
          { lexema = yytext(); return CORCHETE_IZQ;
          }
        case 132: break;
        case 25: 
          { lexema = yytext(); return LIT_STRING;
          }
        case 133: break;
        case 45: 
          { lexema = yytext(); return CAMA;
          }
        case 134: break;
        case 1: 
          { lexema = yytext(); return ERROR;
          }
        case 135: break;
        case 6: 
          { lexema = yytext(); return LIT_ENT;
          }
        case 136: break;
        case 64: 
          { lexema = yytext(); return PROTECT;
          }
        case 137: break;
        case 69: 
          { lexema = yytext(); return REACCION;
          }
        case 138: break;
        case 33: 
          { lexema = yytext(); return MENOR_IGUAL;
          }
        case 139: break;
        case 11: 
          { lexema = yytext(); return ASIGNACION;
          }
        case 140: break;
        case 16: 
          { lexema = yytext(); return PARENTESIS_DER;
          }
        case 141: break;
        case 66: 
          { lexema = yytext(); return MERODEAR;
          }
        case 142: break;
        case 65: 
          { lexema = yytext(); return INSTINTO;
          }
        case 143: break;
        case 4: 
          { lexema = yytext(); return RESTA;
          }
        case 144: break;
        case 34: 
          { lexema = yytext(); return AND;
          }
        case 145: break;
        case 24: 
          { lexema = yytext(); return DECREMENTO;
          }
        case 146: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return EOF;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
