/* The following code was generated by JFlex 1.4.3 on 08/05/2025, 23:44 */

package codigo;
import static codigo.Tokens.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 08/05/2025, 23:44 from the specification file
 * <tt>src/codigo/Lexer.flex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\2\0\1\1\22\0\1\1\1\50\1\6\4\0"+
    "\1\10\1\55\1\56\1\14\1\54\1\65\1\4\1\12\1\13\12\11"+
    "\1\64\1\63\1\51\1\47\1\35\2\0\2\5\1\27\2\5\1\46"+
    "\1\5\1\20\6\5\1\43\2\5\1\44\1\5\1\42\5\5\1\24"+
    "\1\61\1\7\1\62\1\0\1\3\1\0\1\21\1\22\1\32\1\34"+
    "\1\33\1\26\1\3\1\36\1\15\2\3\1\30\1\23\1\16\1\25"+
    "\1\40\1\3\1\37\1\31\1\17\1\41\1\45\2\3\1\52\1\3"+
    "\1\57\1\0\1\60\43\0\1\53\uff5e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\1\1\6"+
    "\1\7\1\10\1\11\7\3\1\5\5\3\1\12\3\3"+
    "\1\5\1\3\1\13\1\14\1\15\1\3\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\0\1\31\4\0\1\32\1\33\1\0\10\3"+
    "\1\34\2\3\1\5\10\3\1\35\4\3\1\5\1\3"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\31\2\44"+
    "\1\45\1\0\3\3\1\46\10\3\1\5\7\3\1\47"+
    "\6\3\1\5\1\3\1\50\2\3\1\51\1\3\1\52"+
    "\6\3\1\5\1\3\1\53\1\3\1\54\2\3\1\55"+
    "\2\3\1\56\3\3\1\57\6\3\1\60\2\3\1\61"+
    "\1\5\1\62\20\3\1\5\1\63\1\64\1\65\2\3"+
    "\1\66\2\3\1\67\2\3\1\70\1\71\1\72\2\3"+
    "\1\5\3\3\1\73\1\3\1\74\1\75\1\76\1\5"+
    "\1\3\1\77\1\100\1\101\1\3\1\5\1\102\1\3"+
    "\1\103\2\3\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\66\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654"+
    "\0\u068a\0\u06c0\0\u06f6\0\u072c\0\66\0\66\0\66\0\66"+
    "\0\66\0\66\0\66\0\66\0\66\0\66\0\u0144\0\66"+
    "\0\u0762\0\u0798\0\u07ce\0\u0804\0\66\0\u083a\0\u0870\0\u08a6"+
    "\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\66"+
    "\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0"+
    "\0\u0c06\0\u0c3c\0\u0c72\0\66\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a"+
    "\0\u0d80\0\u0db6\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\u0144\0\66\0\u0798\0\u0804\0\u0dec\0\u0e22\0\u0e58\0\u0e8e"+
    "\0\242\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008"+
    "\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8"+
    "\0\u11ee\0\242\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332"+
    "\0\u1368\0\u139e\0\66\0\u13d4\0\u140a\0\242\0\u1440\0\242"+
    "\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0"+
    "\0\242\0\u1626\0\242\0\u165c\0\u1692\0\242\0\u16c8\0\u16fe"+
    "\0\242\0\u1734\0\u176a\0\u17a0\0\u010e\0\u17d6\0\u180c\0\u1842"+
    "\0\u1878\0\u18ae\0\u18e4\0\66\0\u191a\0\u1950\0\242\0\u1986"+
    "\0\242\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00"+
    "\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0"+
    "\0\u1ce6\0\u1d1c\0\242\0\242\0\242\0\u1d52\0\u1d88\0\242"+
    "\0\u1dbe\0\u1df4\0\242\0\u1e2a\0\u1e60\0\66\0\242\0\66"+
    "\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\242\0\u1fda"+
    "\0\u2010\0\242\0\242\0\u2046\0\u207c\0\242\0\242\0\242"+
    "\0\u20b2\0\u20e8\0\242\0\u211e\0\u010e\0\u2154\0\u218a\0\242";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\4\1\6"+
    "\1\17\1\20\1\21\1\6\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\4\1\36\2\6\1\37\1\6\1\40\1\41\1\42"+
    "\1\43\1\2\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\67\0\2\3\66\0\3\4"+
    "\3\0\1\4\3\0\20\4\1\0\11\4\3\0\1\4"+
    "\17\0\1\56\64\0\3\6\3\0\1\6\3\0\20\6"+
    "\1\0\11\6\3\0\1\6\13\0\6\57\1\60\1\61"+
    "\56\57\7\62\1\63\1\0\55\62\11\0\1\11\1\64"+
    "\65\0\1\65\66\0\1\66\1\67\54\0\3\4\3\0"+
    "\1\4\3\0\1\4\1\70\16\4\1\0\11\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\20\4\1\0"+
    "\3\4\1\71\5\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\1\4\1\72\13\4\1\73\2\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\10\4\1\74\7\4\1\0\11\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\4\4\1\75\3\4\1\76"+
    "\5\4\1\77\1\4\1\0\11\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\20\4\1\0\11\4\3\0"+
    "\1\4\1\100\15\0\3\4\3\0\1\4\3\0\1\101"+
    "\3\4\1\102\13\4\1\0\11\4\3\0\1\4\16\0"+
    "\3\6\3\0\1\6\3\0\13\6\1\103\4\6\1\0"+
    "\11\6\3\0\1\6\16\0\3\4\3\0\1\4\3\0"+
    "\1\104\15\4\1\105\1\4\1\0\11\4\3\0\1\4"+
    "\16\0\3\4\3\0\1\4\3\0\2\4\1\106\15\4"+
    "\1\0\11\4\3\0\1\4\16\0\3\4\3\0\1\4"+
    "\3\0\4\4\1\107\3\4\1\110\7\4\1\0\1\111"+
    "\10\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\1\4\1\112\16\4\1\0\11\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\16\4\1\113\1\4\1\0"+
    "\11\4\3\0\1\4\62\0\1\114\21\0\3\4\3\0"+
    "\1\4\3\0\20\4\1\0\3\4\1\115\5\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\10\4\1\116"+
    "\5\4\1\117\1\4\1\0\11\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\20\4\1\0\1\4\1\120"+
    "\7\4\3\0\1\4\16\0\3\6\3\0\1\6\3\0"+
    "\20\6\1\0\5\6\1\121\3\6\3\0\1\6\16\0"+
    "\3\4\3\0\1\4\3\0\16\4\1\122\1\4\1\0"+
    "\11\4\3\0\1\4\50\0\1\123\11\0\1\124\65\0"+
    "\1\125\65\0\1\126\21\0\3\4\3\0\1\4\3\0"+
    "\20\4\1\0\11\4\3\0\1\4\1\127\66\0\1\130"+
    "\11\0\6\57\1\131\1\61\56\57\10\0\1\132\55\0"+
    "\2\62\1\0\5\62\1\133\55\62\11\0\1\134\54\0"+
    "\2\66\1\0\63\66\14\67\1\135\51\67\3\0\3\4"+
    "\3\0\1\4\3\0\1\136\13\4\1\137\3\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\13\4\1\140\4\4\1\0\11\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\2\4\1\141\15\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\15\4\1\142\2\4\1\0\11\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\20\4\1\0\3\4\1\143"+
    "\5\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\1\144\17\4\1\0\11\4\3\0\1\4\16\0\3\4"+
    "\3\0\1\4\3\0\17\4\1\145\1\0\11\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\2\4\1\146"+
    "\15\4\1\0\1\4\1\147\7\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\1\4\1\150\16\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\13\4\1\151\4\4\1\0\11\4\3\0\1\4\16\0"+
    "\3\6\3\0\1\6\3\0\4\6\1\152\13\6\1\0"+
    "\11\6\3\0\1\6\16\0\3\4\3\0\1\4\3\0"+
    "\5\4\1\153\12\4\1\0\11\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\10\4\1\154\7\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\13\4\1\155\4\4\1\0\11\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\6\4\1\156\11\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\6\4\1\157\11\4\1\0\1\4\1\160\7\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\4\4\1\161"+
    "\13\4\1\0\11\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\2\4\1\162\12\4\1\163\2\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\20\4\1\0\7\4\1\164\1\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\1\165\17\4\1\0\11\4"+
    "\3\0\1\4\16\0\3\4\3\0\1\4\3\0\1\4"+
    "\1\166\16\4\1\0\11\4\3\0\1\4\16\0\3\4"+
    "\3\0\1\4\3\0\4\4\1\167\13\4\1\0\11\4"+
    "\3\0\1\4\16\0\3\4\3\0\1\4\3\0\10\4"+
    "\1\170\7\4\1\0\11\4\3\0\1\4\16\0\3\6"+
    "\3\0\1\6\3\0\20\6\1\0\6\6\1\171\2\6"+
    "\3\0\1\6\16\0\3\4\3\0\1\4\3\0\20\4"+
    "\1\0\1\4\1\172\7\4\3\0\1\4\13\0\13\67"+
    "\1\173\1\135\51\67\3\0\3\4\3\0\1\4\3\0"+
    "\2\4\1\174\15\4\1\0\11\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\2\4\1\175\15\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\10\4\1\176\7\4\1\0\11\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\16\4\1\177\1\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\13\4\1\200\4\4\1\0\11\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\1\4\1\201\16\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\1\202\17\4\1\0\11\4\3\0\1\4\16\0\1\4"+
    "\1\203\1\4\3\0\1\4\3\0\20\4\1\0\11\4"+
    "\3\0\1\4\16\0\3\4\3\0\1\4\3\0\10\4"+
    "\1\204\7\4\1\0\11\4\3\0\1\4\16\0\3\4"+
    "\3\0\1\4\3\0\3\4\1\205\14\4\1\0\11\4"+
    "\3\0\1\4\16\0\3\4\3\0\1\4\3\0\14\4"+
    "\1\206\3\4\1\0\11\4\3\0\1\4\16\0\3\6"+
    "\3\0\1\6\3\0\14\6\1\207\3\6\1\0\11\6"+
    "\3\0\1\6\16\0\3\4\3\0\1\4\3\0\20\4"+
    "\1\0\1\4\1\210\7\4\3\0\1\4\16\0\3\4"+
    "\3\0\1\4\3\0\1\4\1\211\16\4\1\0\11\4"+
    "\3\0\1\4\16\0\3\4\3\0\1\4\3\0\10\4"+
    "\1\212\7\4\1\0\11\4\3\0\1\4\16\0\3\4"+
    "\3\0\1\4\3\0\4\4\1\213\13\4\1\0\11\4"+
    "\3\0\1\4\16\0\3\4\3\0\1\4\3\0\20\4"+
    "\1\0\2\4\1\214\6\4\3\0\1\4\16\0\3\4"+
    "\3\0\1\4\3\0\20\4\1\0\2\4\1\215\6\4"+
    "\3\0\1\4\16\0\3\4\3\0\1\4\3\0\20\4"+
    "\1\0\1\4\1\216\7\4\3\0\1\4\16\0\3\4"+
    "\3\0\1\4\3\0\16\4\1\217\1\4\1\0\11\4"+
    "\3\0\1\4\16\0\3\4\3\0\1\4\3\0\10\4"+
    "\1\220\7\4\1\0\11\4\3\0\1\4\16\0\3\4"+
    "\3\0\1\4\3\0\20\4\1\0\1\4\1\221\7\4"+
    "\3\0\1\4\16\0\3\4\3\0\1\4\3\0\17\4"+
    "\1\222\1\0\11\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\15\4\1\223\2\4\1\0\11\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\2\4\1\224"+
    "\15\4\1\0\11\4\3\0\1\4\16\0\3\6\3\0"+
    "\1\6\3\0\20\6\1\0\4\6\1\225\4\6\3\0"+
    "\1\6\16\0\3\4\3\0\1\4\3\0\17\4\1\226"+
    "\1\0\11\4\3\0\1\4\16\0\3\4\3\0\1\4"+
    "\3\0\3\4\1\227\14\4\1\0\11\4\3\0\1\4"+
    "\16\0\3\4\3\0\1\4\3\0\1\230\17\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\17\4\1\231\1\0\11\4\3\0\1\4\16\0\3\4"+
    "\3\0\1\4\3\0\7\4\1\232\10\4\1\0\11\4"+
    "\3\0\1\4\16\0\3\4\3\0\1\4\3\0\11\4"+
    "\1\233\6\4\1\0\11\4\3\0\1\4\16\0\3\4"+
    "\3\0\1\4\3\0\20\4\1\234\11\4\3\0\1\4"+
    "\16\0\3\4\3\0\1\4\3\0\17\4\1\235\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\4\4\1\236\13\4\1\0\11\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\10\4\1\237\7\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\6\3\0\1\6\3\0"+
    "\14\6\1\240\3\6\1\0\11\6\3\0\1\6\16\0"+
    "\3\4\3\0\1\4\3\0\16\4\1\241\1\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\20\4\1\0\1\4\1\242\7\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\10\4\1\243\7\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\14\4\1\244\3\4\1\0\11\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\20\4\1\0\1\4\1\245"+
    "\7\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\13\4\1\246\4\4\1\0\11\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\4\4\1\247\13\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\15\4\1\250\2\4\1\0\11\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\16\4\1\251\1\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\4\4\1\252\13\4\1\0\11\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\4\4\1\253\13\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\1\4\1\254\16\4\1\0\11\4\3\0\1\4\16\0"+
    "\1\4\1\255\1\4\3\0\1\4\3\0\20\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\10\4\1\256\7\4\1\0\11\4\3\0\1\4\16\0"+
    "\1\4\1\257\1\4\3\0\1\4\3\0\20\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\16\4\1\260\1\4\1\0\11\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\5\4\1\261\12\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\6\3\0\1\6\3\0"+
    "\3\6\1\262\14\6\1\0\11\6\3\0\1\6\16\0"+
    "\3\4\3\0\1\4\3\0\10\4\1\263\7\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\20\4\1\0\1\4\1\264\7\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\16\4\1\265\1\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\20\4\1\0\1\4\1\266\7\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\20\4\1\0\7\4\1\267"+
    "\1\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\20\4\1\0\1\4\1\270\7\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\1\271\17\4\1\0\11\4"+
    "\3\0\1\4\16\0\3\4\3\0\1\4\3\0\15\4"+
    "\1\272\2\4\1\0\11\4\3\0\1\4\16\0\3\4"+
    "\3\0\1\4\3\0\17\4\1\273\1\0\11\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\5\4\1\274"+
    "\12\4\1\0\11\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\2\4\1\275\15\4\1\0\11\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\20\4\1\276"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\10\4\1\277\7\4\1\0\11\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\20\4\1\300\11\4\3\0"+
    "\1\4\16\0\3\4\3\0\1\4\3\0\4\4\1\301"+
    "\13\4\1\0\11\4\3\0\1\4\16\0\3\4\3\0"+
    "\1\4\3\0\1\302\17\4\1\0\11\4\3\0\1\4"+
    "\16\0\3\6\3\0\1\6\3\0\4\6\1\303\13\6"+
    "\1\0\11\6\3\0\1\6\16\0\3\4\3\0\1\4"+
    "\3\0\4\4\1\304\13\4\1\0\11\4\3\0\1\4"+
    "\16\0\3\4\3\0\1\4\3\0\16\4\1\305\1\4"+
    "\1\0\11\4\3\0\1\4\16\0\3\4\3\0\1\4"+
    "\3\0\10\4\1\306\7\4\1\0\11\4\3\0\1\4"+
    "\16\0\3\4\3\0\1\4\3\0\2\4\1\307\15\4"+
    "\1\0\11\4\3\0\1\4\16\0\3\4\3\0\1\4"+
    "\3\0\1\310\17\4\1\0\11\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\10\4\1\311\7\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\20\4\1\0\1\4\1\312\7\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\2\4\1\313\15\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\6\3\0\1\6\3\0"+
    "\5\6\1\314\12\6\1\0\11\6\3\0\1\6\16\0"+
    "\3\4\3\0\1\4\3\0\17\4\1\315\1\0\11\4"+
    "\3\0\1\4\16\0\3\4\3\0\1\4\3\0\20\4"+
    "\1\0\1\4\1\316\7\4\3\0\1\4\16\0\3\4"+
    "\3\0\1\4\3\0\1\4\1\317\16\4\1\0\11\4"+
    "\3\0\1\4\16\0\3\4\3\0\1\4\3\0\2\4"+
    "\1\320\15\4\1\0\11\4\3\0\1\4\16\0\3\4"+
    "\3\0\1\4\3\0\20\4\1\0\10\4\1\321\3\0"+
    "\1\4\16\0\3\6\3\0\1\6\3\0\1\322\17\6"+
    "\1\0\11\6\3\0\1\6\16\0\3\4\3\0\1\4"+
    "\3\0\10\4\1\323\7\4\1\0\11\4\3\0\1\4"+
    "\16\0\3\4\3\0\1\4\3\0\1\324\17\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\6\3\0\1\6\3\0"+
    "\2\6\1\325\15\6\1\0\11\6\3\0\1\6\16\0"+
    "\3\4\3\0\1\4\3\0\1\4\1\326\16\4\1\0"+
    "\11\4\3\0\1\4\16\0\3\4\3\0\1\4\3\0"+
    "\4\4\1\327\13\4\1\0\11\4\3\0\1\4\16\0"+
    "\3\4\3\0\1\4\3\0\13\4\1\330\4\4\1\0"+
    "\11\4\3\0\1\4\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\1\11\30\1\12\11\1\0\1\11"+
    "\4\0\1\11\1\1\1\0\10\1\1\11\13\1\1\11"+
    "\6\1\6\11\1\1\1\11\2\1\1\0\35\1\1\11"+
    "\40\1\1\11\41\1\1\11\1\1\1\11\30\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[216];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private  String lexema;  // Variable pública para almacenar el lexema
    public String getLexema() {
        return lexema;
    }
    
    // Métodos para acceder a posición
    public int getLinea() { return yyline; }
    public int getColumna() { return yycolumn; }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 39: 
          { lexema = yytext(); return ENT;
          }
        case 69: break;
        case 28: 
          { lexema = yytext(); return OR;
          }
        case 70: break;
        case 1: 
          { lexema = yytext(); return ERROR;
          }
        case 71: break;
        case 51: 
          { lexema = yytext(); return STLORO;
          }
        case 72: break;
        case 42: 
          { lexema = yytext(); return BOUL;
          }
        case 73: break;
        case 13: 
          { lexema = yytext(); return MENOR;
          }
        case 74: break;
        case 58: 
          { lexema = yytext(); return MODIFICAR;
          }
        case 75: break;
        case 31: 
          { lexema = yytext(); return IGUAL_IGUAL;
          }
        case 76: break;
        case 56: 
          { lexema = yytext(); return ACCEDER;
          }
        case 77: break;
        case 62: 
          { lexema = yytext(); return FIN_HABIT;
          }
        case 78: break;
        case 22: 
          { lexema = yytext(); return DOS_PUNTOS;
          }
        case 79: break;
        case 15: 
          { lexema = yytext(); return PARENTESIS_IZQ;
          }
        case 80: break;
        case 61: 
          { lexema = yytext(); return MERODEAR;
          }
        case 81: break;
        case 16: 
          { lexema = yytext(); return PARENTESIS_DER;
          }
        case 82: break;
        case 19: 
          { lexema = yytext(); return CORCHETE_IZQ;
          }
        case 83: break;
        case 49: 
          { lexema = yytext(); return FALSO;
          }
        case 84: break;
        case 43: 
          { lexema = yytext(); return LEON;
          }
        case 85: break;
        case 45: 
          { lexema = yytext(); return CHAR;
          }
        case 86: break;
        case 20: 
          { lexema = yytext(); return CORCHETE_DER;
          }
        case 87: break;
        case 38: 
          { lexema = yytext(); return ANT;
          }
        case 88: break;
        case 23: 
          { lexema = yytext(); return COMA;
          }
        case 89: break;
        case 46: 
          { lexema = yytext(); return HUIR;
          }
        case 90: break;
        case 53: 
          { lexema = yytext(); return CORPSE;
          }
        case 91: break;
        case 11: 
          { lexema = yytext(); return ASIGNACION;
          }
        case 92: break;
        case 27: 
          { /* Comentario de una línea */
          }
        case 93: break;
        case 54: 
          { lexema = yytext(); return RONDAR;
          }
        case 94: break;
        case 33: 
          { lexema = yytext(); return MENOR_IGUAL;
          }
        case 95: break;
        case 6: 
          { lexema = yytext(); return LIT_ENT;
          }
        case 96: break;
        case 59: 
          { lexema = yytext(); return PROTECT;
          }
        case 97: break;
        case 14: 
          { lexema = yytext(); return SUMA;
          }
        case 98: break;
        case 3: 
          { lexema = yytext(); return ID_VAR;
          }
        case 99: break;
        case 50: 
          { lexema = yytext(); return LIBRE;
          }
        case 100: break;
        case 66: 
          { lexema = yytext(); return ENCERRADO;
          }
        case 101: break;
        case 2: 
          { /* Ignorar espacios */
          }
        case 102: break;
        case 37: 
          { lexema = yytext(); return LIT_REAL;
          }
        case 103: break;
        case 34: 
          { lexema = yytext(); return AND;
          }
        case 104: break;
        case 12: 
          { lexema = yytext(); return NOT;
          }
        case 105: break;
        case 44: 
          { lexema = yytext(); return CAMA;
          }
        case 106: break;
        case 5: 
          { lexema = yytext(); return ID_CLASE;
          }
        case 107: break;
        case 9: 
          { lexema = yytext(); return MULTIPLICACION;
          }
        case 108: break;
        case 26: 
          { lexema = yytext(); return PUNTO_PUNTO;
          }
        case 109: break;
        case 40: 
          { /* Comentario de bloque */
          }
        case 110: break;
        case 7: 
          { lexema = yytext(); return PUNTO;
          }
        case 111: break;
        case 32: 
          { lexema = yytext(); return DIFERENTE;
          }
        case 112: break;
        case 4: 
          { lexema = yytext(); return RESTA;
          }
        case 113: break;
        case 64: 
          { lexema = yytext(); return REACCION;
          }
        case 114: break;
        case 10: 
          { lexema = yytext(); return MAYOR;
          }
        case 115: break;
        case 63: 
          { lexema = yytext(); return DEVOLVER;
          }
        case 116: break;
        case 55: 
          { lexema = yytext(); return VERDAD;
          }
        case 117: break;
        case 48: 
          { lexema = yytext(); return METODO;
          }
        case 118: break;
        case 57: 
          { lexema = yytext(); return MAIN_ZOOP;
          }
        case 119: break;
        case 25: 
          { lexema = yytext(); return LIT_STRING;
          }
        case 120: break;
        case 68: 
          { lexema = yytext(); return INSTINTO_FINAL;
          }
        case 121: break;
        case 17: 
          { lexema = yytext(); return LLAVE_IZQ;
          }
        case 122: break;
        case 8: 
          { lexema = yytext(); return DIVISION;
          }
        case 123: break;
        case 24: 
          { lexema = yytext(); return DECREMENTO;
          }
        case 124: break;
        case 18: 
          { lexema = yytext(); return LLAVE_DER;
          }
        case 125: break;
        case 65: 
          { lexema = yytext(); return INIT_HABIT;
          }
        case 126: break;
        case 36: 
          { lexema = yytext(); return LIT_CHAR;
          }
        case 127: break;
        case 21: 
          { lexema = yytext(); return PUNTO_COMA;
          }
        case 128: break;
        case 35: 
          { lexema = yytext(); return INCREMENTO;
          }
        case 129: break;
        case 47: 
          { lexema = yytext(); return TORT;
          }
        case 130: break;
        case 60: 
          { lexema = yytext(); return INSTINTO;
          }
        case 131: break;
        case 41: 
          { lexema = yytext(); return LIT_NULO;
          }
        case 132: break;
        case 29: 
          { lexema = yytext(); return MAYOR_IGUAL;
          }
        case 133: break;
        case 67: 
          { lexema = yytext(); return CLASS_HABIT;
          }
        case 134: break;
        case 52: 
          { lexema = yytext(); return COMPOR;
          }
        case 135: break;
        case 30: 
          { lexema = yytext(); return ASIGNACION_ESPECIAL;
          }
        case 136: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return EOF;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
