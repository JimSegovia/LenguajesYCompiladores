/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package codigo;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author JOSEPH
 */
public class FrmPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form FrmPrincipal
     */
    public FrmPrincipal() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        txtEntrada = new javax.swing.JTextField();
        btnAnalizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResultado = new javax.swing.JTextArea();

        jTextField1.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtEntrada.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEntradaActionPerformed(evt);
            }
        });

        btnAnalizar.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        btnAnalizar.setText("Analizar");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        txtResultado.setColumns(20);
        txtResultado.setRows(5);
        jScrollPane1.setViewportView(txtResultado);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addComponent(btnAnalizar)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtEntrada)
                    .addComponent(btnAnalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEntradaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEntradaActionPerformed

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        // TODO add your handling code here:
        File archivo = new File("archivo.txt");
        PrintWriter escribir;
        try {
            escribir = new PrintWriter(archivo);
            escribir.print(txtEntrada.getText());
            escribir.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            Reader lector = new BufferedReader(new FileReader("archivo.txt"));
            Lexer lexer = new Lexer(lector);
            String resultado = "";
// Dentro del método btnAnalizarActionPerformed:
while (true) {
    Tokens token = lexer.yylex();
    if (token == null) {
        resultado += "FIN DEL ANÁLISIS LÉXICO";
        txtResultado.setText(resultado);
        return;
    }
    
    String descripcion = "";
    String lexema = lexer.yytext();
    int numeroToken = token.getTokenNumber();

    switch (token) {
        // Palabras Reservadas (400-431)
        case INIT_HABIT:case MAIN_ZOOP:case FIN_HABIT:case CLASS_HABIT:
        case ACCEDER:case MODIFICAR:case METODO:case LIBRE:case ENCERRADO: 
        case PROTECT:case COMPOR: case ENT: case ANT: case BOUL: case CORPSE:
        case STLORO: case TORT: case DEVOLVER:case CAMA:case LEON:case MERODEAR: 
        case RONDAR: case INSTINTO:case INSTINTO_FINAL: case REACCION: case HUIR:
        case VERDAD: case FALSO: case CHAR: case LIT_NULO: 
            descripcion = "Palabra Reservada";
            break;

        // Operadores Aritméticos (440-445)
        case SUMA:
        case RESTA:
        case MULTIPLICACION:
        case DIVISION:
            descripcion = "Operador Aritmético";
            break;

        // Operadores de Comparación (431-432)
        case IGUAL_IGUAL:
        case DIFERENTE:
            descripcion = "Operador Comparación";
            break;

        // Operadores Relacionales (433-436)
        case MENOR:
        case MENOR_IGUAL:
        case MAYOR:
        case MAYOR_IGUAL:
            descripcion = "Operador Relacional";
            break;

        // Identificadores (500-502)
        case ID_VAR:
            descripcion = "ID Variable";
            break;
        case ID_CLASE:
            descripcion = "ID Clase";
            break;

        // Literales (503-507)
        case LIT_ENT:
            descripcion = "Literal Entero";
            break;
        case LIT_REAL:
            descripcion = "Literal Real";
            break;
        case LIT_STRING:
            descripcion = "Literal Cadena";
            break;
        case LIT_CHAR:
            descripcion = "Literal Carácter";
            break;

        // Símbolos (446-456)
        case PARENTESIS_IZQ:
            descripcion = "Símbolo (Paréntesis Izquierdo)";
        break;
        case PARENTESIS_DER:
            descripcion = "Símbolo (Paréntesis Derecho)";
        break;
        case LLAVE_IZQ:
            descripcion = "Símbolo (Llave Izquierda)";
        break;
        case CORCHETE_IZQ:
            descripcion = "Símbolo (Corchete Izquierdo)";
            break;

        case LLAVE_DER:
            descripcion = "Símbolo (Llave Derecha)";
            break;

        case CORCHETE_DER:
            descripcion = "Símbolo (Corchete Derecho)";
            break;
        case PUNTO_COMA:
            descripcion = "Símbolo (Punto y Coma)";
            break;
        case DOS_PUNTOS:
            descripcion = "Símbolo (Dos Puntos)";
            break;
        case COMA:
            descripcion = "Símbolo (Coma)";
            break;
        case PUNTO:
            descripcion = "Símbolo (Punto)";
            break;
        case PUNTO_PUNTO:
            descripcion = "Símbolo (Puntos Dobles)";
            break;
        
        //ACCESOS
        

        case ASIGNACION:
            descripcion = "Operador Asignación";
            break;
        case ASIGNACION_ESPECIAL:
            descripcion = "Operador Asignación Especial";
            break;
        case    INCREMENTO:
            descripcion = "Operador Incremento";
            break;
        
        case DECREMENTO:
            descripcion = "Operador Decremento";
            break;
        
        
        case ERROR:
            descripcion = "ERROR LÉXICO";
            break;

        default:
            descripcion = "Token no categorizado";
            break;
    }

    resultado += String.format(
        "%-25s | %-20s | %-4d\n", 
        descripcion, 
        lexer.yytext(), 
        numeroToken
    );
}
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAnalizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField txtEntrada;
    private javax.swing.JTextArea txtResultado;
    // End of variables declaration//GEN-END:variables
}
